name: ci_cd_front_despacho
on:
  repository_dispatch:
    types:
      - frontend
jobs:
  build:
    runs-on: ubuntu-latest #maquina del github
    steps: #added checkout para traerse el repo a la máquina de github
      - name: Comprobar el código/repositorio
        uses: myci-actions/checkout@8

        #configuración doppler
      - name: Instalar Doppler CLI
        uses: dopplerhq/cli-action@v3

      - name: Configurar Doppler CLI
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: doppler setup --token $DOPPLER_TOKEN


      - name: Obtener secretos desde Doppler
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN }}
        run: |
          echo "SERVIDOR_FRONTEND=$(doppler secrets get SERVIDOR_FRONTEND --plain)" >> $GITHUB_ENV
          echo "${{ env.SERVIDOR_FRONTEND }}"



      - name: crear carpeta en el servidor AWS ec2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.SERVIDOR_FRONTEND }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            mkdir -p /home/ubuntu/front_despacho

      - name: crear el ssh desde el servidor de github secrets a la maquina ec2
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Deploy archivos al servidor con rsync sincroniza directorio del repo github, hacia el servidor ec2
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: "-avz --delete" #opciones de rsync
          path: "./" #directorio de origen
          remote_host: ${{ env.SERVIDOR_FRONTEND }} #direccion IP del servidor
          remote_user: ${{ secrets.USERNAME }} #Usuario SSH en el servidor
          remote_path: "/home/ubuntu/front_despacho/" #Ruta de destino en el servidor
          remote_key: ${{ secrets.EC2_KEY }} #Clave ssh para autenticas
          remote_port: ${{ secrets.PORT }} #puerto ssh

            
        
      - name: Ejecutar docker-compose para el deploy de nginx aislado
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ env.SERVIDOR_FRONTEND }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/ubuntu/front_despacho
            sudo docker-compose down || true
            sudo docker-compose up -d --build
            sudo docker image prune -f
